// src/app/api/verify-payment/route.js

import { NextResponse } from 'next/server';
import Stripe from 'stripe';
import { supabase } from '@/lib/supabaseClient';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

export async function GET(req) {
  console.log("\n--- [API /verify-payment] –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç ---");
  try {
    const url = new URL(req.url);
    const paymentIntentId = url.searchParams.get('payment_intent_id');
    console.log(`1. –û—Ç—Ä–∏–º–∞–Ω–æ Payment Intent ID: ${paymentIntentId}`);

    if (!paymentIntentId) {
      throw new Error('Payment Intent ID –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
    }

    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);
    console.log("2. –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –≤—ñ–¥ Stripe.");

    if (paymentIntent.status === 'succeeded') {
      console.log("3. –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É: 'succeeded'.");
      const orderId = paymentIntent.metadata.order_id;
      const userId = paymentIntent.metadata.user_id;
      console.log(`4. –ó—á–∏—Ç–∞–Ω–æ –º–µ—Ç–∞–¥–∞–Ω—ñ: orderId=${orderId}, userId=${userId}`);

      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .update({ status: 'completed' })
        .eq('id', orderId)
        .select()
        .single();

      if (orderError) throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ Supabase: ${orderError.message}`);
      console.log("5. –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 'completed'.");

      if (userId && orderData) {
        console.log("6. –£–º–æ–≤–∏ –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–æ (—î userId —Ç–∞ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è).");
        const pointsToAdd = Math.floor(orderData.total_price);
        console.log(`7. –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –±–∞–ª—ñ–≤ –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è: ${pointsToAdd}`);

        if (pointsToAdd > 0) {
          console.log(`8. –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é 'increment_points' –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId} –∑ ${pointsToAdd} –±–∞–ª–∞–º–∏.`);
          const { error: pointsError } = await supabase.rpc('increment_points', {
            user_id_input: userId,
            points_to_add: pointsToAdd,
          });

          if (pointsError) throw new Error(`–ü–æ–º–∏–ª–∫–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –≤ Supabase: ${pointsError.message}`);
          console.log("‚úÖ 9. –ë–∞–ª–∏ —É—Å–ø—ñ—à–Ω–æ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ!");
        } else {
          console.log("–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è, –æ—Å–∫—ñ–ª—å–∫–∏ —Å—É–º–∞ –±–∞–ª—ñ–≤ 0 –∞–±–æ –º–µ–Ω—à–µ.");
        }
      } else {
        console.log("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤. –ü—Ä–∏—á–∏–Ω–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π userId –∞–±–æ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.", { userId: userId, hasOrderData: !!orderData });
      }
      return NextResponse.json({ status: 'success' });
    } else {
      console.log(`–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É: '${paymentIntent.status}'. –ë–∞–ª–∏ –Ω–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.`);
      return NextResponse.json({ status: 'failed' });
    }
  } catch (error) {
    console.error('üî¥ [API /verify-payment] –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê:', error.message);
    return NextResponse.json({ status: 'failed', error: error.message }, { status: 500 });
  }
}